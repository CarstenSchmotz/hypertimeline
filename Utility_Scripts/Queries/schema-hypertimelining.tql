#This file is part of the Hypertimeline Project
#February 2024

define

time_domain sub entity,
    owns time_domain_reference,
    plays entry_of_domain:time_domain;

time_domain_entry sub entity,
    owns time_domain_reference, 
    owns value_long,
    owns value_datetime,
    plays precedence_ordering:earlier, 
    plays precedence_ordering:later,
    plays global_ordering:earlier, 
    plays global_ordering:later,
    plays global_equality:left,
    plays global_equality:right,
    plays entry_of_domain:entry,
    plays time_data_in_entry:entry;


value_long sub attribute,
    value long,
    plays time_data_in_entry:time_data;
    
value_datetime sub attribute,
    value datetime,
    plays time_data_in_entry:time_data;

time_domain_reference sub attribute,
    value string;

provenance sub attribute,
    value string;


time_data_in_entry sub relation,    #connects time domain entry  with time data
    relates time_data,
    relates entry; 

entry_of_domain sub relation,    #connects time domain entry with time domain of time data
    relates entry,
    relates time_domain; 

precedence_ordering sub relation,  
    owns provenance,
    relates earlier,
    relates later; 

global_ordering sub relation,  
    owns provenance,
    relates earlier,
    relates later; 

global_equality sub relation,  
    owns provenance,
    relates left,
    relates right; 

rule intra_domain_ordering:
when {
     ## The condition 
    $te1 isa time_domain_entry;
    $te2 isa time_domain_entry;
    $td isa time_domain;
    $ts1 isa attribute;
    $ts2 isa attribute;
    $eod1 (entry:$te1, time_domain:$td) isa entry_of_domain;
    $eod2 (entry:$te2, time_domain:$td) isa entry_of_domain;
    $data_rel_1 (entry:$te1, time_data:$ts1) isa time_data_in_entry;
    $data_rel_2 (entry:$te2, time_data:$ts2) isa time_data_in_entry;
    $ts1 < $ts2;
    
} then {
    # The conclusion
    (earlier:$te1, later:$te2) isa global_ordering; #We could add a provenance information here
};


rule global_ordering_if_precedence:
when {
     ## The condition 
    $te1 isa time_domain_entry;
    $te2 isa time_domain_entry;
    $lt12 (earlier:$te1, later:$te2) isa precedence_ordering;
    
} then {
    # The conclusion
    (earlier:$te1, later:$te2) isa global_ordering; #We could add a provenance information here
};

#undefine rule global_ordering_transitivity;

#define 
rule global_ordering_transitivity_if_intra_domain:
when {
     ## The condition 
    $te1 isa time_domain_entry;
    $te2 isa time_domain_entry;
    $te3 isa time_domain_entry;
    #$lt12 (earlier:$te1, later:$te2) isa global_ordering;
    $lt23 (earlier:$te2, later:$te3) isa global_ordering;
    
    $td isa time_domain;
    $ts1 isa attribute;
    $ts2 isa attribute;
    $eod1 (entry:$te1, time_domain:$td) isa entry_of_domain;
    $eod2 (entry:$te2, time_domain:$td) isa entry_of_domain;
    $data_rel_1 (entry:$te1, time_data:$ts1) isa time_data_in_entry;
    $data_rel_2 (entry:$te2, time_data:$ts2) isa time_data_in_entry;
    $ts1 < $ts2;
    
} then {
    # The conclusion
    (earlier:$te1, later:$te3) isa global_ordering; # We could add some provenance information here
};

#define 
rule global_ordering_transitivity_if_precedence:
when {
     ## The condition 
    $te1 isa time_domain_entry;
    $te2 isa time_domain_entry;
    $te3 isa time_domain_entry;
    $lt12 (earlier:$te1, later:$te2) isa precedence_ordering;
    $lt23 (earlier:$te2, later:$te3) isa global_ordering;
    
} then {
    # The conclusion
    (earlier:$te1, later:$te3) isa global_ordering; # We could add some provenance information here
};


rule global_equality_reflexivity:
when {
    ## The condition 
    $entry_1 isa time_domain_entry;
    $entry_2 isa time_domain_entry;
    $equ (left:$entry_1, right:$entry_2) isa global_equality;
} then {
    ## The conclusion
    (left:$entry_2, right:$entry_1) isa global_equality;
};

rule union_transitivity_earlier:
when {
    ## The condition 
    $earlier_entry_1 isa time_domain_entry;
    $equal_entry_1 isa time_domain_entry;
    $equal_entry_2 isa time_domain_entry;    
    $equ (left:$equal_entry_1, right:$equal_entry_2) isa global_equality;
    $tl1 (earlier:$earlier_entry_1, later:$equal_entry_1) isa global_ordering;
} then {
    ## The conclusion
    (earlier:$earlier_entry_1, later:$equal_entry_2) isa global_ordering;
};

rule union_transitivity_later:
when {
    ## The condition 
    $equal_entry_1 isa time_domain_entry;
    $equal_entry_2 isa time_domain_entry;
    $later_entry_2 isa time_domain_entry;
    $equ (left:$equal_entry_1, right:$equal_entry_2) isa global_equality;
    $tl2 (earlier:$equal_entry_2, later:$later_entry_2) isa global_ordering;
} then {
    ## The conclusion
    (earlier:$equal_entry_1, later:$later_entry_2) isa global_ordering;
};


