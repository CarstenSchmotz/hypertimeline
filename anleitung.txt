first activated enviroment
 C:\Users\carst\Documents\venvName\Scripts\Activate.ps1  

start typedb Server exakt Folder is missing 
   
C:\Users\carst\Documents\typedb-all-windows-x86_64-2.25.7\typedb-all-windows-x86_64-2.25.7\typedb.bat server
#.\typedb.bat server                                                                                                                             

created database 
c:/Users/carst/Documents/venvName/Scripts/python.exe c:/Users/carst/Documents/GitHub/hypertimeline/Utility_Scripts/create_database.py


foo@bar:~$ python3 Utility_Scripts/create_database.py
insert data numbers are the columns and after the = its the formattype
c:\Users\carst\Documents\venvName\Scripts\python.exe .\ingest_module.py "\Utility_Scripts\Example_Data\Case_Study_1_FAT_Data_with_Time_Manipulation.tsv" 5=datetime 10=long 12=long -c 5,10,12

test 
c:\Users\carst\Documents\venvName\Scripts\python.exe "C:\Users\carst\Documents\GitHub\hypertimeline\mytestdata\test_histroy.tsv" 2=Long 3=datetime #-c 2,3
you Need an .tsv

test of inconsitency
c:\Users\carst\Documents\venvName\Scripts\python.exe .\Utility_Scripts\detect_inconsistency.py  



Erkl√§rung befehel ingest_module
parser = argparse.ArgumentParser(description='Inserts time domains and time domain entries into the database.')
parser.add_argument('filename', metavar='f', help='the .tsv file that contains the time domains and their entries')
parser.add_argument('time_domains', nargs="+", help="Specify which columns contain time domains and their data type, e.g., 1=datetime 2=long", metavar="COL_NUMBER=TYPE")
parser.add_argument('-db', '--database', dest='database_name', help="Specify the database's name", default="Hypertimelining_III")
parser.add_argument('-c', '--coincidence', dest='coincidences_string', help="Specify the time domains with coincidence using a,b,c")
parser.add_argument('-p', '--precedence', dest='precedences_string', help="Specify the time domains with precedence using a<b")
parser.add_argument('-e', '--encoding', dest='encoding', default="utf-16", help="Specify the encoding used in the .tsv file, default: utf-16")
parser.add_argument('-t', '--timestamp-format', dest='timestamp_format_string', default="%d/%m/%Y  %H:%M:%S", help="Specify the format string used for the timestamps in the .tsv file, default: %d/%m/%Y  %H:%M:%S, shortcut for sqlite-file-example: 'firefox'")